mongosh
show dbs
use mydatabase

db.createCollection("items");

db.items.insertMany([
    { "item_id": 1, "item_quantity": 100, "price": 50, "brand": "BrandA" },
    { "item_id": 2, "item_quantity": 150, "price": 30, "brand": "BrandB" },
    { "item_id": 3, "item_quantity": 200, "price": 20, "brand": "BrandA" },
    { "item_id": 4, "item_quantity": 250, "price": 60, "brand": "BrandC" },
    { "item_id": 5, "item_quantity": 300, "price": 40, "brand": "BrandB" }
]);


db.items.insertOne({ "item_id": 6, "item_quantity": 80, "price": 25, "brand": "BrandD" });


db.items.find().pretty();


db.items.updateOne({ "item_id": 1 }, { $set: { "item_quantity": 120 } });


db.items.deleteOne({ "item_id": 2 });

var mapFunction = function() {
    emit(this.item_id, this.item_quantity);
};

var reduceFunction = function(key, values) {
    return Array.sum(values);
};


db.items.mapReduce(
    mapFunction,
    reduceFunction,
    { out: "item_quantity_count" }
);


db.item_quantity_count.find().pretty();

// db.collection.save(document)
// Create a new item document
// var newItem = { "item_id": 7, "item_quantity": 50, "price": 15, "brand": "BrandE" };

// Save the new item to the collection
// db.items.save(newItem); // This will insert a new document since item_id is not present in the collection.

// Later, if we want to update the item with item_id 7
// newItem.item_quantity = 75; // Update the quantity
 //db.items.save(newItem); // This will update the existing document with item_id 7.
